---
title: "eds221-day2-session1"
format: html
editor: visual
execute: 
  warning: false 
---

## Making & indexing data in R

### Vectors

Making Vectors

```{r}
library(tidyverse)
```

```{r}
#Using cocatenate function to combine characters
dogs <- c("teddy", "khora", "waffle", "banjo", "tallie")

#Check the class of dogs 
typeof(dogs)
class(dogs)

```

```{r}
#Vector can only have one type in it so it will store as character 
myBreakfast <- c("waffles", 2, TRUE, "coffee")
typeof(myBreakfast)
```

```{r}
weights <- c(50, 60, 25, 35, 55)

#The values are stored as doubles
class(weights)
typeof(weights)
```

```{r}
weights_integer <- c(50L, 60L, 25L, 35L, 55L)

#Still numeric but integer is a subset of it 
typeof(weights_integer)
class(weights_integer)
```

```{r}
#Is. functions are questions 
is.numeric(weights_integer)
```

```{r}
zipcode <- c(93105, 93514, 93101, 93401)
class(zipcode)

#Use as. family functions to recast data classes
#Use is. family functions to ASK what class something is
zipcodes_chr <- as.character(zipcode)

```

## Create a vector with named elements

```{r}
#These names are strings, qoutes are saying character
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast",  banjo = "blue diamonds", tallie = "farmers dog")

class(dog_food)

#It will only find the class of variable it equals to 
test <- c(cat = 4, dog = 10, mouse = 14)
class(test)
```

```{r}
#If we want to access the second element in dog_food 
dog_food[2]
#r uses a one index meaning that first element of vector is given the position value of 1, so to call alpo we use 2. (python and java use 0 indexing)

#You can also call the name of the second element
dog_food["khora"]
```

## Access Ranges of values in a vector

Use: to refer to a range(low : high)

```{r}
trees <- c("ponderosa", "lodgepole", "jeffrey", "sugar", "white pine", "bristlecone")

trees[3]

#What if we want a range?
trees[3 : 5]
```

## Warm- up for 'for loops'

```{r}
i <- 3
trees[i]
```

```{r}
#single varaible redefined so I changes w newer code
i <- seq(1:3) #same thing as seq(from = 1, to = 3)

trees[i]
```

```{r}
#Reassigning values based on reposition
trees[3] <- "OAK"
```

## Matrix indexing

```{r}
fish_size <- matrix(c(0.4, 0.9, 05, 06), ncol = 2, nrow = 2, byrow = FALSE)
fish_size

class(fish_size)
str(fish_size)
typeof(fish_size)

fish_size[2,2]

fish_size[, 2]
```

an edit!

## Lists

```{r}
urchins <- list(color = "blue", values = c(1, 2, 3), meal = c("lunch", "dinner", "dessert"), cost = 5L)
```

```{r}
urchins_list <- urchins[2]

urchins_vector <- urchins[[2]]

class(urchins_list)
class(urchins_vector)

```

```{r}
urchins$values

```

```{r}
sample1 <- c(1, 2, 2, 3, 4, 5, 6, 6)
sample2 <- c(3, 4, 5, 6, 6, 7, 8, 8, 7, 7)

#What is p-value? 
ttest_example <- t.test(sample1, sample2)
```

The mean size for treees in Site A is greater than themean size in Site B (.., my statistical summary, `r ttest_example$p.value`) .

## Data Frames

```{r}
fruit <- data.frame(type = c("apple", "banana", "peach"), 
                    mass = c(130, 195, 150))

class(fruit)

fruit

fruit[3, 2]

#pluck chooses: (data, row, number in vector)
purrr::pluck(fruit, "type", 2)
fruit$type[2]

#Double brackets give you actual values
#These are both asking for the same thing
starwars$starships[[1]][2]

purrr::pluck(starwars, "starships", 1, 2)
```
